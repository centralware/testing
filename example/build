#!/bin/sh
CUR=$(pwd)

###############################################
# We first need to locate our function script #
###############################################
FNC=""
[ -f ./functions ] && FNC="./"
[ -f ../functions ] && FNC="../"
[ "${FNC}" == "" ] && [ -f /opt/functions ] && FNC="/opt"
[ "${FNC}" == "" ] && [ -f /etc/init.d/functions ] && FNC="/etc/init.d"
[ "${FNC}" == "" ] && [ -f /usr/local/etc/functions ] && FNC="/usr/local/etc"
[ "${FNC}" == "" ] && echo -e '\033[1;31mERROR! \033[0;39mSupport functions file not found!  Aborting.' && exit 1
. ${FNC}/functions

##########################################################
# Next, we need to fill in the fields for this extension #
##########################################################

EXT_NAME="Dropbear";                    EXT_EXEC="dropbear"
EXT_VERS="2020.80";                     EXT_DATE="04-01-2025"
EXT_DEPS=""                                                      # Dependencies needed to run this extension

SRC_AUTH=""
SRC_COPY=""
SRC_SITE=""
SRC_DATE=""
SRC_DEPS="wget bash python3.6 compiletc squashfs-tools"          # Dependencies needed to compile this extension

URL_VERS="https://matt.ucc.asn.au/dropbear"
URL_HOST="https://matt.ucc.asn.au/dropbear/releases/SRCFILENAME"
SRC_DAT1="https://matt.ucc.asn.au/dropbear/dropbear.html"

getVersion()
{
    if [ ! -f version ]; then
        wget -q --no-check-certificate ${URL_VERS} -O version.html
        cat version.html | grep "Release" | grep "latest" | awk '{print $2}' > version
        rm version.html -f
    fi
    echo $(cat version)
}

getDownload()
{
    # getDownload [VERSION]
    V=$1
    URL_SRC=${URL_HOST/SRCFILENAME/$EXT_EXEC}-${V}.tar.bz2
    if [ ! -f $CUR/dl/${EXT_EXEC}-${V}.tar.bz2 ]; then
        mkdir -p $CUR/dl
        cd $CUR/dl
        wget -q --no-check-certificate $URL_SRC || exit 1
    fi
}

extractDownload()
{
    # extractDownload [VERSION]
    V=$1
    if [ ! -d $CUR/src ]; then
        mkdir -p $CUR/src
        cd $CUR/src
        tar -jxf $CUR/dl/${EXT_EXEC}-${V}.tar.bz2 || exit 1
    fi
}

configureSource()
{
    # configureSource [VERSION]
    V=$1
    PathName="${EXT_EXEC}-${V}"
    cd $CUR/src/$PathName
    if [ ! -f ./.configured ]; then
        getCPU
        ./configure \
            --prefix=/usr/local \
            --mandir=/usr/local/share/man \
            --infodir=/usr/local/share/info > \
            $CUR/_configure.log 2>&1 || exit 1
        touch ./.configured
    fi
}

compileSource()
{
    # compileSource [VERSION]
    V=$1
    PathName="${EXT_EXEC}-${V}"
    cd $CUR/src/$PathName
    getCPU
    make -j$(nproc) -O > $CUR/_compile.log 2>&1 || exit 1
}

compileTest()
{
    # compileTest [VERSION]
    V=$1
    PathName="${EXT_EXEC}-${V}"
    cd $CUR/src/$PathName
    getCPU
    make -j$(nproc) check > $CUR/_testing.log 2>&1
}

compilePack()
{
    # compilePack [VERSION]
    V=$1
    PathName="${EXT_EXEC}-${V}"
    cd $CUR/src/$PathName
    getCPU
    make DESTDIR=$CUR/ext install > $CUR/_install.log 2>&1 || exit 1
    # Copy INIT into our package
    mkdir -p $CUR/ext/usr/local/etc/init.d
    cp $CUR/build.init $CUR/ext/usr/local/etc/init.d/${EXT_EXEC}
    cd $CUR/ext && stripper && tar -zcf $CUR/${PathName}.bin.tgz *
    cd $CUR && mksquashfs ext ${PathName}.nix >$CUR/_squash.log 2>&1 || exit 1
    md5sum ${PathName}.nix > ${PathName}.sig
}
